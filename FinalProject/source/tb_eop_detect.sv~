// $Id: $
// File name:   tb_eop_detect.sv
// Created:     2/22/2018
// Author:      Sanjay Rao
// Lab Section: 337-07
// Version:     1.0  Initial Design Entry
// Description: testbench for eop_detect.sv
`timescale 1ns / 10ps

// Define parameters
	// basic test bench parameters
	localparam	CLK_PERIOD	= 2.5;
	localparam	CHECK_DELAY = 1; // Check 1ns after the rising edge to allow for propagation delay
	
	// Shared Test Variables
	reg tb_clk;

	// Clock generation block
	always
	begin
		tb_clk = 1'b0;
		#(CLK_PERIOD/2.0);
		tb_clk = 1'b1;
		#(CLK_PERIOD/2.0);
	end
	
	// Default Config Test Variables & constants
	


	generate

	// DUT portmaps
		eop DUT
		(
			.clk(tb_clk),
			.n_rst(tb_n_rst),
			.clear(tb_clear),
			.count_enable(tb_count_enable),
			.rollover_val(tb_rollover_val),
			.rollover_flag(tb_rollover_flag),
			.count_out(tb_count_out)
		);
	
	endgenerate
	
	clocking cb @(posedge tb_clk);
 		// 1step means 1 time precision unit, 10ps for this module. We assume the hold time is less than 200ps.
		default input #1step output #100ps; // Setup time (01CLK -> 10D) is 94 ps
		output #800ps n_rst = tb_n_rst; // FIXME: Removal time (01CLK -> 01R) is 281.25ps, but this needs to be 800 to prevent metastable value warnings
		output clear = tb_clear,
		count_enable = tb_count_enable,
		rollover_val = tb_rollover_val;
		input count_out = tb_count_out,
                rollover_flag = tb_rollover_flag;
	endclocking
	
	// Default Configuration Test bench main process
	initial
	begin
		// Initialize all of the test inputs
		tb_n_rst		= 1'b1;		
		tb_clear	= 1'b0;		
		tb_count_enable		= 1'b0;		
		tb_test_num 	= 0;
		tb_expected_rollover_flag = 0;
		tb_expected_count_out = 0;
		
		// Power-on Reset of the DUT
		// Assume we start at negative edge. Immediately assert reset at first negative edge
		// without using clocking block in order to avoid metastable value warnings
		@(negedge tb_clk);
		tb_n_rst	<= 1'b0; 	// Need to actually toggle this in order for it to actually run dependent always blocks
		@cb;
		cb.n_rst	<= 1'b1; 	// Deactivate the chip reset
		
		// Wait for a while to see normal operation
		@cb;
		@cb;

		
		// Test 1
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b0000;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 2
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b1;
		cb.count_enable <= 1'b1;
                cb.clear <= 1'b1;
		cb.rollover_val <= 4'b1100;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 3
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b1;
                cb.clear <= 1'b1;
		cb.rollover_val <= 4'b0111;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = 0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 4
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b1;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b1111;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 5
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b0011;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 6
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b1;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b1111;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 7
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b1;
		cb.rollover_val <= 4'b0000;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 8
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b1001;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '1;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 9
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b1110;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;

		// Test 10
		tb_test_num = tb_test_num + 1;
		cb.n_rst <= 1'b0;
		cb.count_enable <= 1'b0;
                cb.clear <= 1'b0;
		cb.rollover_val <= 4'b1111;
		
		tb_expected_count_out = 0;
		tb_expected_rollover_flag = '0;
		@cb; // Measure slightly before the second clock edge
		@cb;
		if (tb_expected_count_out == cb.count_out)
			$info("%s Case %0d:: PASSED: COUNT_OUT CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: COUNT_OUT INCORRECT", NAME, tb_test_num);
		if (tb_expected_rollover_flag == cb.rollover_flag)
			$info("%s Case %0d:: PASSED: ROLLOVER VALUE CORRECT", NAME, tb_test_num);
		else // Test case failed
			$error("%s Case %0d:: FAILED: ROLLOVER VALUE INCORRECT", NAME, tb_test_num);
		// De-assert reset for a cycle
		cb.n_rst <= 1'b1;
		@cb;
	end
		
		
endmodule
